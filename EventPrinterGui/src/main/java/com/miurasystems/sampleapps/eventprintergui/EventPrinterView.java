/*
 * Copyright Â© 2017 Miura Systems Ltd. All rights reserved.
 */
package com.miurasystems.sampleapps.eventprintergui;

import android.support.annotation.Nullable;

import com.intellij.uiDesigner.core.Spacer;
import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;

import org.apache.commons.lang3.NotImplementedException;

import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;

import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.WindowConstants;

public final class EventPrinterView implements EventPrinterMvp.View {
    private JButton mConnectButton;
    private JTextField mDeviceNameTextField;
    private JButton mClearButton;
    private JPanel mButtonBar;
    private JPanel mRootPanel;
    private JTextArea mOutputTextArea;

    @Nullable
    private EventPrinterMvp.ViewPresenter mPresenter;
    private boolean mConnectShown;

    private EventPrinterView() {
        mConnectButton.addActionListener(this::onConnectionButtonClicked);
        mClearButton.addActionListener(this::onClearButtonClicked);

        mPresenter = null;
        mConnectShown = true;
    }

    @Override
    public void setPresenter(@Nullable EventPrinterMvp.ViewPresenter presenter) {
        mPresenter = presenter;
    }

    private void onClearButtonClicked(ActionEvent e) {
        if (mPresenter != null) {
            mPresenter.onClearButtonClicked();
        }
    }

    private void onConnectionButtonClicked(ActionEvent e) {
        if (mPresenter == null) {
            return;
        }

        if (mConnectShown) {
            mPresenter.onConnectButtonClicked();
        } else {
            mPresenter.onDisconnectButtonClicked();
        }
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
    }

    @Override
    public String getDeviceName() {
        return mDeviceNameTextField.getText();
    }

    @Override
    public void hideDisconnectButton() {
        if ("Disconnect".equals(mConnectButton.getText())) {
            mConnectButton.setVisible(false);
        }
    }

    @Override
    public void hideConnectButton() {
        if ("Connect".equals(mConnectButton.getText())) {
            mConnectButton.setVisible(false);
        }
    }

    @Override
    public void showConnectButton() {
        mConnectShown = true;
        mConnectButton.setVisible(true);
        mConnectButton.setText("Connect");
    }

    @Override
    public void showDisconnectButton() {
        mConnectShown = false;
        mConnectButton.setVisible(true);
        mConnectButton.setText("Disconnect");
    }

    @Override
    public void setDeviceNameEditable(boolean tf) {
        mDeviceNameTextField.setEnabled(tf);
    }

    @Override
    public void setTextArea(String s) {
        mOutputTextArea.setText(s);
    }

    @Override
    public void showConnectionErrorMessage(String message) {
        JOptionPane.showMessageDialog(mRootPanel,
                message, "Connection Problem",
                JOptionPane.ERROR_MESSAGE
        );
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mRootPanel = new JPanel();
        mRootPanel.setLayout(new FormLayout(
                "fill:max(d;4px):noGrow,left:4dlu:noGrow,fill:d:grow(2.0),left:4dlu:noGrow,"
                        + "fill:max(d;4px):noGrow",
                "center:d:noGrow,top:4dlu:noGrow,center:max(m;100px):grow,top:5dlu:noGrow,"
                        + "center:max(d;4px):noGrow"
        ));
        mButtonBar = new JPanel();
        mButtonBar.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        CellConstraints cc = new CellConstraints();
        mRootPanel.add(mButtonBar, cc.xy(3, 1));
        final JLabel label1 = new JLabel();
        label1.setText("Device Name:");
        mButtonBar.add(label1);
        mDeviceNameTextField = new JTextField();
        mDeviceNameTextField.setColumns(8);
        mDeviceNameTextField.setEnabled(true);
        mDeviceNameTextField.setText("Miura 515");
        mButtonBar.add(mDeviceNameTextField);
        final Spacer spacer1 = new Spacer();
        mButtonBar.add(spacer1);
        mConnectButton = new JButton();
        mConnectButton.setInheritsPopupMenu(false);
        mConnectButton.setText("Connect");
        mButtonBar.add(mConnectButton);
        mClearButton = new JButton();
        mClearButton.setText("Clear");
        mButtonBar.add(mClearButton);
        final JScrollPane scrollPane1 = new JScrollPane();
        scrollPane1.setVerticalScrollBarPolicy(22);
        mRootPanel.add(scrollPane1, cc.xy(3, 3, CellConstraints.FILL, CellConstraints.FILL));
        mOutputTextArea = new JTextArea();
        mOutputTextArea.setEditable(false);
        mOutputTextArea.setEnabled(true);
        mOutputTextArea.setLineWrap(true);
        mOutputTextArea.setText("");
        scrollPane1.setViewportView(mOutputTextArea);
    }

    /** @noinspection ALL */
    public JComponent $$$getRootComponent$$$() {
        return mRootPanel;
    }

    static void makeAndShow() {

        EventPrinterPresenter presenter = new EventPrinterPresenter();

        EventPrinterView view = new EventPrinterView();
        //noinspection CallToSimpleSetterFromWithinClass
        view.setPresenter(presenter);
        presenter.setView(view);

        EventPrinterModel model = new EventPrinterModel();
        model.setPresenter(presenter);
        presenter.setModel(model);

        MyComponentListener listener = new MyComponentListener(view, presenter);
        view.mRootPanel.addComponentListener(listener);

        JFrame frame = new JFrame("EventPrinterView");
        frame.setContentPane(view.mRootPanel);
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        frame.setPreferredSize(new Dimension(750, 500));
        frame.pack();
        frame.setVisible(true);

    }

    private static final class MyComponentListener extends ComponentAdapter {

        private final EventPrinterView mView;
        private final EventPrinterPresenter mPresenter;

        MyComponentListener(EventPrinterView view, EventPrinterPresenter presenter) {
            mView = view;
            mPresenter = presenter;
        }

        @Override
        public void componentShown(ComponentEvent e) {
            mView.setPresenter(mPresenter);
            mPresenter.setView(mView);
        }

        @Override
        public void componentHidden(ComponentEvent e) {
            mView.setPresenter(null);
            mPresenter.setView(null);
        }
    }
}
